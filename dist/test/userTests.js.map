{"version":3,"sources":["../../server/test/userTests.js"],"names":["should","chai","use","chaiHttp","describe","correctUserDetails","firstName","lastName","wrongUserDetails","it","done","request","server","post","send","end","response","body","statusMessage","equal","statusCode","have","property","be","a","status","correctDetails","email","password","passportUrl","wrongDetails","conflictDetails"],"mappings":"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","file":"userTests.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../app';\n\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\n// describe('Demo test', () => {\n//   it('This is demo test and actually tests nothing', () => {\n//     ('one').should.equal('one');\n//   });\n// });\n\ndescribe('Login tests', () => {\n  const correctUserDetails = {\n    firstName: 'nonso',\n    lastName: 'calix',\n  };\n\n  const wrongUserDetails = {\n    firstName: 'meeky',\n    lastName: 'shyboy',\n  };\n  \n\n  it('It should successfully login a user when all inputs are correct', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(correctUserDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('login successful');\n        response.statusCode.should.equal(200);\n        done();\n      });\n  });\n\n  it('It should not log a user in if any field is left empty', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(wrongUserDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('user not found');\n        response.statusCode.should.equal(404);\n        response.body.should.have.property('statusMessage');\n        response.body.should.be.a('object');\n        response.should.have.status(404);\n        done();\n      });\n  });\n});\n\ndescribe('Signup Tests', () => {\n  const correctDetails = {\n    email: 'igwechinonso@gmail.com',\n    password: '123456',\n    passportUrl: 'server\\\\uploads\\\\1548808436079-images.jpeg',\n  };\n  const wrongDetails = {\n    email: 'calix',\n  };\n\n  const conflictDetails = {\n    email: correctDetails.email,\n    password: '1234',\n    passportUrl: 'kdhkshdkhd.png',\n  };\n\n\n  it('should successfully create a new User', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send(correctDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('Account created successfully');\n        response.should.have.status(201);\n        done();\n      });\n  });\n\n  it('should not create a user with missing email or password field', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send(wrongDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('All fields are required');\n        response.should.have.status(400);\n        done();\n      });\n  });\n\n  it('should not create a new user with an already existing mail', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send(conflictDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('Email already exists');\n        response.should.have.status(409);\n        done();\n      });\n  });\n});"]}