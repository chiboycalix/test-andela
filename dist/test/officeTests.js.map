{"version":3,"sources":["../../server/test/officeTests.js"],"names":["should","chai","use","chaiHttp","describe","correctDetails","type","name","wrongDetails","it","done","request","server","post","send","end","response","body","statusMessage","equal","have","status","get","be","a","validOffice","id","invalidOffice"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA;AACA,IAAMA,SAASC,eAAKD,MAAL,EAAf;;AAEAC,eAAKC,GAAL,CAASC,kBAAT;;AAGAC,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAMC,iBAAiB;AACrBC,UAAM,UADe;AAErBC,UAAM;AAFe,GAAvB;AAIA,MAAMC,eAAe;AACnBD,UAAM;AADa,GAArB;;AAIAE,KAAG,iEAAH,EAAsE,UAACC,IAAD,EAAU;AAC9ET,mBAAKU,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQT,cAFR,EAGGU,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASC,IAAT,CAAcC,aAAd,CAA4BlB,MAA5B,CAAmCmB,KAAnC,CAAyC,6BAAzC;AACAH,eAAShB,MAAT,CAAgBoB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAX;AACD,KAPH;AAQD,GATD;;AAWAD,KAAG,gDAAH,EAAqD,UAACC,IAAD,EAAU;AAC7DT,mBAAKU,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQN,YAFR,EAGGO,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASC,IAAT,CAAcC,aAAd,CAA4BlB,MAA5B,CAAmCmB,KAAnC,CAAyC,yBAAzC;AACAH,eAAShB,MAAT,CAAgBoB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAX;AACD,KAPH;AAQD,GATD;AAUD,CA9BD;;AAgCAN,SAAS,cAAT,EAAyB,YAAM;AAC7BK,KAAG,mCAAH,EAAwC,UAACC,IAAD,EAAU;AAChDT,mBAAKU,OAAL,CAAaC,aAAb,EACGU,GADH,CACO,iBADP,EAEGP,GAFH,CAEO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAAShB,MAAT,CAAgBoB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAL,eAASC,IAAT,CAAcjB,MAAd,CAAqBuB,EAArB,CAAwBC,CAAxB,CAA0B,QAA1B;AACAd;AACD,KANH;AAOD,GARD;AASD,CAVD;;AAYAN,SAAS,uBAAT,EAAkC,YAAM;AACtC,MAAMqB,cAAc;AAClBC,QAAI,CADc;AAElBnB,UAAM,YAFY;AAGlBD,UAAM;AAHY,GAApB;AAKA,MAAMqB,gBAAgB;AACpBpB,UAAM,YADc;AAEpBD,UAAM;AAFc,GAAtB;;AAKAG,KAAG,+BAAH,EAAoC,UAACC,IAAD,EAAU;AAC5CT,mBAAKU,OAAL,CAAaC,aAAb,EACGU,GADH,sBAC0BG,YAAYC,EADtC,EAEGX,GAFH,CAEO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAAShB,MAAT,CAAgBoB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAL,eAASC,IAAT,CAAcC,aAAd,CAA4BlB,MAA5B,CAAmCmB,KAAnC,CAAyC,SAAzC;AACAT;AACD,KANH;AAOD,GARD;;AAUAD,KAAG,kCAAH,EAAuC,UAACC,IAAD,EAAU;AAC/CT,mBAAKU,OAAL,CAAaC,aAAb,EACGU,GADH,sBAC0BK,cAAcD,EADxC,EAEGX,GAFH,CAEO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAAShB,MAAT,CAAgBoB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAL,eAASC,IAAT,CAAcC,aAAd,CAA4BlB,MAA5B,CAAmCmB,KAAnC,CAAyC,uBAAzC;AACAT;AACD,KANH;AAOD,GARD;AASD,CA9BD","file":"officeTests.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\n\nimport server from '../app';\n\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\n\ndescribe('/POST office', () => {\n  const correctDetails = {\n    type: 'logo.jpg',\n    name: 'office name',\n  };\n  const wrongDetails = {\n    name: 'party name',\n  };\n  \n  it('it should be able to POST a party with all fields being entered', (done) => {\n    chai.request(server)\n      .post('/api/v1/offices')\n      .send(correctDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('Office created successfully');\n        response.should.have.status(201);\n        done();\n      });\n  });\n  \n  it('should not post an Office with a missing field', (done) => {\n    chai.request(server)\n      .post('/api/v1/offices')\n      .send(wrongDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('All fields are required');\n        response.should.have.status(400);\n        done();\n      });\n  });\n});\n\ndescribe('/GET offices', () => {\n  it('it should be able GET all offices', (done) => {\n    chai.request(server)\n      .get('/api/v1/offices')\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('object');\n        done();\n      });\n  });\n});\n  \ndescribe('/GET/:officeId office', () => {\n  const validOffice = {\n    id: 1,\n    name: 'party name',\n    type: 'chi.jpg',\n  };\n  const invalidOffice = {\n    name: 'party name',\n    type: 'chi.jpg',\n  };\n  \n  it('it should be able GET a party', (done) => {\n    chai.request(server)\n      .get(`/api/v1/offices/${validOffice.id}`)\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.statusMessage.should.equal('success');\n        done();\n      });\n  });\n  \n  it('should only return a valid party', (done) => {\n    chai.request(server)\n      .get(`/api/v1/offices/${invalidOffice.id}`)\n      .end((request, response) => {\n        response.should.have.status(404);\n        response.body.statusMessage.should.equal('Office does not exist');\n        done();\n      });\n  });\n});"]}