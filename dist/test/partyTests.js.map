{"version":3,"sources":["../../server/test/partyTests.js"],"names":["should","chai","use","chaiHttp","describe","correctDetails","name","path","wrongDetails","it","done","request","server","post","send","end","response","body","statusMessage","equal","have","status","get","be","a","validParty","id","logoUrl","invalidParty","editedvalidParty","patch","deleteParty","delete"],"mappings":"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","file":"partyTests.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../app';\n\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\ndescribe('/POST party', () => {\n  const correctDetails = {\n    name: 'party name',\n    path: 'logo.jpg',\n  };\n  const wrongDetails = {\n    name: 'party name',\n  };\n\n  it('it should be able to POST a party', (done) => {\n    chai.request(server)\n      .post('/api/v1/parties')\n      .send(correctDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('Party created successfully');\n        response.should.have.status(201);\n        done();\n      });\n  });\n\n  it('should not post a Party with a missing field', (done) => {\n    chai.request(server)\n      .post('/api/v1/parties')\n      .send(wrongDetails)\n      .end((request, response) => {\n        response.body.statusMessage.should.equal('All fields are required');\n        response.should.have.status(400);\n        done();\n      });\n  });\n});\n\n\ndescribe('/GET parties', () => {\n  it('it should be able GET all parties', (done) => {\n    chai.request(server)\n      .get('/api/v1/parties')\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('object');\n        done();\n      });\n  });\n});\n\ndescribe('/GET/:partyId party', () => {\n  const validParty = {\n    id: 1,\n    name: 'party name',\n    logoUrl: 'chi.jpg',\n  };\n  const invalidParty = {\n    name: 'party name',\n    logoUrl: 'chi.jpg',\n  };\n\n  it('it should be able GET a party', (done) => {\n    chai.request(server)\n      .get(`/api/v1/parties/${validParty.id}`)\n      .end((request, response) => {\n        response.should.have.status(200);\n        done();\n      });\n  });\n\n  it('should only return a valid party', (done) => {\n    chai.request(server)\n      .get(`/api/v1/parties/${invalidParty.id}`)\n      .end((request, response) => {\n        response.should.have.status(404);\n        response.body.statusMessage.should.equal('Party does not exist');\n        done();\n      });\n  });\n});\n\ndescribe('/PATCH a Party', () => {\n  const validParty = {\n    id: 1,\n    name: 'calix',\n  };\n  const editedvalidParty = {\n    id: validParty.id,\n    name: `${validParty.name}cgh`,\n  };\n\n  it('should be able to edit a parties name', (done) => {\n    chai.request(server)\n      .patch(`/api/v1/parties/${validParty.id}/${validParty.name}`)\n      .send(editedvalidParty)\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.statusMessage.should.equal('Party updated successfully');\n        done();\n      });\n  });\n\n  //   const nonEmptyPartyField = {\n  //     id: validParty.id,\n  //     name: 'a',\n  //   };\n\n//   it('should fail if name is updated to empty field', (done) => {\n//     chai.request(server)\n//       .patch(`/api/v1/parties/${validParty.id}/${nonEmptyPartyField.name}`)\n//       .send(nonEmptyPartyField)\n//       .end((request, response) => {\n//         response.should.have.status(400);\n//         response.body.statusMessage.should.equal('Name field is required');\n//         done();\n//       });\n//   });\n});\n\n\ndescribe('/Delete party', () => {\n  const deleteParty = {\n    id: 1,\n    name: 'calix',\n  };\n  it('should delete a party', (done) => {\n    chai.request(server)\n      .delete(`/api/v1/parties/${deleteParty.id}`)\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.statusMessage.should.equal('party deleted');\n        done();\n      });\n  });\n});"]}