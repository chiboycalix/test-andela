{"version":3,"sources":["../../server/controllers/PartyController.js"],"names":["PartyController","req","res","body","name","path","parties","push","id","length","partyId","params","i","parseInt","partyName","splice","partyController"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;;;;;IAEMA,e;;;;;;;;AACN;gCACcC,G,EAAKC,G,EAAK;AAAA,sBACGD,IAAIE,IADP;AAAA,UACZC,IADY,aACZA,IADY;AAAA,UACNC,IADM,aACNA,IADM;;AAEpB,UAAI,CAACD,IAAD,IAAS,CAACC,IAAd,EAAoB;AAClB,eAAO,wBAAaH,GAAb,EAAkB,GAAlB,EAAuB,yBAAvB,CAAP;AACD;AACDI,wBAAQC,IAAR,CAAa;AACXC,YAAIF,kBAAQG,MAAR,GAAiB,CADV;AAEXL,kBAFW;AAGXC;AAHW,OAAb;AAKA,aAAO,wBAAaH,GAAb,EAAkB,GAAlB,EAAuB,4BAAvB,EAAqDI,kBAAQA,kBAAQG,MAAR,GAAiB,CAAzB,CAArD,CAAP;AACD;;AAED;;;;+BACWR,G,EAAKC,G,EAAK;AACnB,aAAO,wBAAaA,GAAb,EAAkB,GAAlB,EAAuB,SAAvB,EAAkCI,iBAAlC,CAAP;AACD;;AAED;;;;6BACSL,G,EAAKC,G,EAAK;AAAA,UACTQ,OADS,GACGT,IAAIU,MADP,CACTD,OADS;;AAEjB,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIN,kBAAQG,MAA5B,EAAoCG,KAAK,CAAzC,EAA4C;AAC1C,YAAIN,kBAAQM,CAAR,EAAWJ,EAAX,KAAkBK,SAASH,OAAT,EAAkB,EAAlB,CAAtB,EAA6C;AAC3C,iBAAO,wBAAaR,GAAb,EAAkB,GAAlB,EAAuB,SAAvB,EAAkCI,kBAAQM,CAAR,CAAlC,CAAP;AACD;AACF;AACD,aAAO,wBAAaV,GAAb,EAAkB,GAAlB,EAAuB,sBAAvB,CAAP;AACD;;AAED;;;;+BACWD,G,EAAKC,G,EAAK;AAAA,UACXY,SADW,GACGb,IAAIU,MADP,CACXG,SADW;AAAA,UAEXV,IAFW,GAEFH,IAAIE,IAFF,CAEXC,IAFW;;AAGnB,WAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIN,kBAAQG,MAA5B,EAAoCG,KAAK,CAAzC,EAA4C;AAC1C,YAAIN,kBAAQM,CAAR,EAAWR,IAAX,KAAoBU,SAAxB,EAAmC;AACjC,cAAI,CAACV,IAAL,EAAW;AACT,mBAAO,wBAAaF,GAAb,EAAkB,GAAlB,EAAuB,wBAAvB,CAAP;AACD;AACDI,4BAAQM,CAAR,EAAWR,IAAX,GAAkBA,IAAlB;AACA,iBAAO,wBAAaF,GAAb,EAAkB,GAAlB,EAAuB,4BAAvB,EAAqDI,kBAAQM,CAAR,CAArD,CAAP;AACD;AACD,eAAO,wBAAaV,GAAb,EAAkB,GAAlB,EAAuB,sBAAvB,CAAP;AACD;AACF;;AAED;;;;gCACYD,G,EAAKC,G,EAAK;AAAA,UACZQ,OADY,GACAT,IAAIU,MADJ,CACZD,OADY;;AAEpB,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIN,kBAAQG,MAA5B,EAAoCG,KAAK,CAAzC,EAA4C;AAC1C,YAAIN,kBAAQM,CAAR,EAAWJ,EAAX,KAAkBK,SAASH,OAAT,EAAkB,EAAlB,CAAtB,EAA6C;AAC3CJ,4BAAQS,MAAR,CAAeT,kBAAQM,CAAR,EAAWJ,EAAX,GAAgB,CAA/B,EAAkC,CAAlC;AACA,iBAAO,wBAAaN,GAAb,EAAkB,GAAlB,EAAuB,eAAvB,CAAP;AACD;AACD,eAAO,wBAAaA,GAAb,EAAkB,GAAlB,EAAuB,sBAAvB,CAAP;AACD;AACF;;;;;;AAGH,IAAMc,kBAAkB,IAAIhB,eAAJ,EAAxB;kBACegB,e","file":"PartyController.js","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable consistent-return */\nimport parties from '../db/partyDB';\nimport httpResponse from '../helpers/response';\n\nclass PartyController {\n// Create party Controller function\n  createParty(req, res) {\n    const { name, path } = req.body;\n    if (!name || !path) {\n      return httpResponse(res, 400, 'All fields are required');\n    }\n    parties.push({\n      id: parties.length + 1,\n      name,\n      path,\n    });\n    return httpResponse(res, 201, 'Party created successfully', parties[parties.length - 1]);\n  }\n\n  // Get all parties Controller function\n  getParties(req, res) { \n    return httpResponse(res, 200, 'Success', parties);\n  }\n\n  // Get party Controller function\n  getParty(req, res) {\n    const { partyId } = req.params;\n    for (let i = 0; i < parties.length; i += 1) {\n      if (parties[i].id === parseInt(partyId, 10)) {\n        return httpResponse(res, 200, 'success', parties[i]);\n      }\n    }\n    return httpResponse(res, 404, 'Party does not exist');\n  }\n\n  // Patch party Controller function\n  patchParty(req, res) {\n    const { partyName } = req.params;\n    const { name } = req.body;\n    for (let i = 0; i < parties.length; i += 1) {\n      if (parties[i].name === partyName) {\n        if (!name) {\n          return httpResponse(res, 400, 'Name field is required');\n        }\n        parties[i].name = name;\n        return httpResponse(res, 200, 'Party updated successfully', parties[i]);\n      }\n      return httpResponse(res, 404, 'Party does not exist');\n    }\n  }\n\n  // Delete party Controller function\n  deleteParty(req, res) {\n    const { partyId } = req.params;\n    for (let i = 0; i < parties.length; i += 1) {\n      if (parties[i].id === parseInt(partyId, 10)) {\n        parties.splice(parties[i].id - 1, 1);\n        return httpResponse(res, 200, 'party deleted');\n      }\n      return httpResponse(res, 404, 'party does not exist');\n    }\n  }\n}\n\nconst partyController = new PartyController();\nexport default partyController;"]}